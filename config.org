My own personal emacs config
* my own navigation/kill/yank/insert/etc. functions
 #+BEGIN_SRC emacs-lisp
 ;; functions
 (defun backward-kill-line ()
   "Kill a backward line"
   (interactive)
   (kill-line -1)
   )

 (defun comment-or-uncomment-line-or-region ()
   "Comments or uncomments the current line or region."
   (interactive)
   (if (region-active-p)
       (comment-or-uncomment-region (region-beginning) (region-end))
     (comment-or-uncomment-region (line-beginning-position) (line-end-position))
     )
   )

 (defun kill-line-or-region ()
   "kills current line or region."
   (interactive)
   (if (region-active-p)
       (kill-region (region-beginning)(region-end))
     (kill-region (line-beginning-position) (line-end-position))
     )
   )

 (defun my-insert-date (prefix)
     "Insert the current date. With prefix-argument, use ISO format. With
    two prefix arguments, write out the day and month name."
     (interactive "P")
     (let ((format (cond
                    ((not prefix) "%Y-%m-%d %H:%M")
                    ((equal prefix '(4)) "%Y-%m-%d")
                    ((equal prefix '(16)) "%A, %d. %B %Y")))
           )
       (insert (format-time-string format))))

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;               insert a file name
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (defun my-insert-file-name (filename &optional args)
     "Insert name of file FILENAME into buffer after point.

   Prefixed with \\[universal-argument], expand the file name to
   its fully canocalized path.  See `expand-file-name'.

   Prefixed with \\[negative-argument], use relative path to file
   name from current directory, `default-directory'.  See
   `file-relative-name'.

   The default with no prefix is to insert the file name exactly as
   it appears in the minibuffer prompt."
     ;; Based on insert-file in Emacs -- ashawley 20080926
     (interactive "*fInsert file name: \nP")
     (cond ((eq '- args)
            (insert (file-relative-name filename)))
           ((not (null args))
            (insert (expand-file-name filename)))
           (t
            (insert filename))))

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;Cleanup commands;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (defun untabify-buffer ()
   "Untabify current buffer"
   (interactive)
   (untabify (point-min) (point-max)))

 (defun indent-buffer()
   "indent whole buffer"
   (interactive)
   (delete-trailing-whitespace)
   (indent-region (point-min) (point-max) nil)
   (untabify (point-min) (point-max)))

 (defun cleanup-buffer ()
   "Perform a bunch of operations on the whitespace content of a buffer."
   (interactive)
   (indent-buffer)
   (untabify-buffer)
   (delete-trailing-whitespace))

#+END_SRC
* global keybindings
** Navigation
#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map [?\C-m] [C-m])
  (global-set-key (kbd "C-t") 'previous-line)
  (global-set-key (kbd "C-w") 'next-line)
  (global-set-key (kbd "C-n") 'forward-char)
  (global-set-key (kbd "<C-m>") 'backward-char)
  (global-set-key (kbd "C-S-t") 'scroll-down)
  (global-set-key (kbd "C-S-w") 'scroll-up)
  (global-set-key (kbd "C-S-n") 'forward-word)
  (global-set-key (kbd "C-S-m") 'backward-word)
  (global-set-key (kbd "C-x C-n") 'end-of-line)
  (global-set-key (kbd "C-x <C-m>") 'beginning-of-line)
  (global-set-key (kbd "C-x C-w") 'end-of-buffer)
  (global-set-key (kbd "C-x C-t") 'beginning-of-buffer)

  (global-set-key (kbd "M-d") 'other-window)
  (global-set-key (kbd "C-o") 'split-window-right)
  (global-set-key (kbd "C-S-o") 'split-window-below)
  (global-set-key (kbd "C-x C-o") 'delete-window)
  (global-set-key (kbd "C-k") 'kill-buffer-and-window)

  (global-set-key (kbd "C-b") 'switch-to-next-buffer)
  (global-set-key (kbd "C-x C-b") 'switch-to-buffer)
  (global-set-key (kbd "M-b") 'switch-to-prev-buffer)
#+END_SRC
** help
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Killing
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t") 'backward-kill-line)
(global-set-key (kbd "M-w") 'kill-line)
(global-set-key (kbd "M-n") 'delete-forward-char)
(global-set-key (kbd "M-m") 'delete-backward-char)
(global-set-key (kbd "M-S-t") 'previous-line)
(global-set-key (kbd "M-S-w") 'next-line)
(global-set-key (kbd "M-N") 'kill-word)
(global-set-key (kbd "M-M") 'backward-kill-word)

#+END_SRC
** Copy, Cut, Paste, Undo
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s--") 'copy-region-as-kill)
  (global-set-key (kbd "C-=") 'yank)
  ;; (global-set-key (kbd "C-s-=") 'yank-pop)
  (global-set-key (kbd "C--") 'kill-line-or-region)
  (global-set-key (kbd "C-z") 'undo)
#+END_SRC
** Keyboard quit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-q") 'keyboard-quit)
#+END_SRC
** Commenting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-/") 'comment-or-uncomment-line-or-region)
#+END_SRC
** my custom functions
#+BEGIN_SRC emacs-lisp
(defun my-increment-number-decimal (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
        (setq inc-by (if arg arg 2))
        (skip-chars-backward "0123456789")
        (when (re-search-forward "[0-9]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 10 field-width) answer)))
          (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                 answer)))))))

(defun my-decrement-number-decimal (&optional arg)
  (interactive "p*")
  (my-increment-number-decimal (if arg (- arg) -1)))

#+END_SRC
** unset keybindings
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-c C-s"))
#+END_SRC
** my kbd macros
#+BEGIN_SRC emacs-lisp

(fset 'start_hcube_venv_and_test
   [?\M-x ?f ?i ?n ?d ?  ?f ?i ?l ?e return ?\C-x ?\C-m ?\M-w ?/ ?h ?o ?m ?e ?/ ?n ?i ?c ?k ?/ ?p ?y ?t ?h ?o ?n ?_ ?s ?c ?r ?i ?p ?t ?s ?/ ?h ?o ?l ?o ?c ?u ?b ?e ?/ ?t ?e ?s ?t ?. ?p ?y return ?\M-x ?p ?y ?v ?e ?n ?v ?- ?w ?o ?r ?k ?o ?n return return])

(fset 'email-region
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([75497517 134217848 109 117 52 101 45 99 111 tab 109 112 111 115 101 tab tab 110 101 119 return 24 23 67108925 24 20 24 20 23 24 14] 0 "%d")) arg)))

(global-set-key (kbd "C-x C-k v") 'start_hcube_venv_and_test)
(global-set-key (kbd "C-x C-k m") 'email-region)
#+END_SRC

* shell commands to run at startup
#+BEGIN_SRC sh
setxkbmap -option ctrl:nocaps
#+END_SRC
* Emacs appearece menu,toolbar,scrollbar
#+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (toggle-scroll-bar -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (scroll-bar-mode -1)
     (show-paren-mode t)
   (setq line-number-mode t)                     ;start in line-number-mode
   (setq column-number-mode t)                   ;start in column-number-mode
   (use-package rainbow-delimiters
   :ensure t
   :config
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))


   (use-package highlight-indent-guides
     :ensure t
     :custom
     (highlight-indent-guides-method 'character)
     (highlight-indent-guides-responsive 'top)
     (highlight-indent-guides-auto-enabled nil)
     :custom-face
       (highlight-indent-guides-character-face ((t (:foreground ,"#2f4f4f"))))
       (highlight-indent-guides-top-character-face ((t (:foreground ,"#4682b4"))))
       (highlight-indentation-face ((t (:foreground ,"#2f4f4f"))))

     :hook
     (prog-mode . highlight-indent-guides-mode))
 #+END_SRC
* Emacs global settings
#+BEGIN_SRC emacs-lisp
  (tooltip-mode nil)                      ; one-line help text in the echo area
  (electric-indent-mode 1)

  ;;dont have to use "yes" or "no" instead use "y" or "n"
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;; emacs autocomplete with tab;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (add-hook
   'eshell-mode-hook
   (lambda ()
     (setq pcomplete-cycle-completions nil)))

  (autoload 'bash-completion-dynamic-complete
     "bash-completion"
     "BASH completion hook")
   (add-hook 'shell-dynamic-complete-functions
     'bash-completion-dynamic-complete)

  ;;;; sudo completion
  (defun pcomplete/sudo ()
    "Completion rules for the `sudo' command."
    (let ((pcomplete-ignore-case t))
      (pcomplete-here (funcall pcomplete-command-completion-function))
      (while (pcomplete-here (pcomplete-entries)))))

  (setq eshell-cmpl-cycle-completions nil)
  (setq tooltip-delay 3)
  ;;tab key fix
  (setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))

  (use-package smartparens
  :ensure t
  :config
  (smartparens-global-mode 1)
  )

  (use-package openwith
  :ensure t
  :config
  (openwith-mode t)
  (setq openwith-associations '(("\\.pdf\\'" "evince" (file))
                                ("\\.docx\\'" "libreoffice" (file))
                                ("\\.odp\\'" "libreoffice" (file))
                                ("\\.odt\\'" "libreoffice" (file))
                                ("\\.MOV\\'" "totem" (file))
  ))
  )

;; prevent <openwith> from interfering with mail attachments
(require 'mm-util)
(add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler)
#+END_SRC

* speed up startup
#+BEGIN_SRC emacs-lisp
;;; Temporarily reduce garbage collection during startup. Inspect `gcs-done'.
(defun ambrevar/reset-gc-cons-threshold ()
  (setq gc-cons-threshold (car (get 'gc-cons-threshold 'standard-value))))
(setq gc-cons-threshold (* 64 1024 1024))
(add-hook 'after-init-hook #'ambrevar/reset-gc-cons-threshold)

;;; Temporarily disable the file name handler.
(setq default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(defun ambrevar/reset-file-name-handler-alist ()
  (setq file-name-handler-alist default-file-name-handler-alist))
(add-hook 'after-init-hook #'ambrevar/reset-file-name-handler-alist)

#+END_SRC

* key chord
#+BEGIN_SRC emacs-lisp
(use-package key-chord
:ensure t
:config
(key-chord-mode 1)
)
#+END_SRC
* Python-elpy
** My pdb functions
- in order to make these functions work I need to import all of python mode.. Its ridiculous
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
       :ensure t



  )

  (require 'pdb_emacs.el)

#+END_SRC
** initialize elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
  :ensure t
  :config
  (elpy-enable)
  (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
  (setq python-shell-interpreter "ipython3"
      ;; python-shell-interpreter-args "--profile=my_pylab"
                                          )
  (key-chord-define-global ".3" 'ipython3)

  (defun my-elpy-hook ()
      (define-key my-keys-minor-mode-map (kbd "C-S-i") nil)
      (define-key my-keys-minor-mode-map (kbd "C-S-k") nil)
      (local-set-key (kbd "M-t") 'elpy-nav-move-line-or-region-up)
      (local-set-key (kbd "M-w") 'elpy-nav-move-line-or-region-down)
      (local-set-key (kbd "M-r") 'elpy-nav-indent-shift-right)
      (local-set-key (kbd "M-h") 'elpy-nav-indent-shift-left)
      (local-set-key (kbd "C-c p") 'my-insert-pdb-break)
      (local-set-key (kbd "C-c o") 'my-pdb-cleanup)
      (local-set-key (kbd "C-c C-/")    'my-increment-number-decimal)
      (local-set-key (kbd "C-c C-l")    'my-decrement-number-decimal)
      (setq elpy-disable-backend-error-display 1)
      )
  (add-hook 'elpy-mode-hook 'my-elpy-hook)


#+END_SRC
* ipython settings
#+BEGIN_SRC emacs-lisp

   (defun my-inf-py-hook ()
          (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
          (local-set-key "\C-cp" 'pdb-pm)
          )
   (add-hook 'inferior-python-mode-hook 'my-inf-py-hook))

  (defun eshell/sp ()
    (setq python-shell-interpreter "isympy3")
    (setq python-shell-interpreter-args "--pretty=unicode -I --")
    (run-python)
    (python-shell-switch-to-shell)
    (delete-other-windows)
    )
  (use-package ob-ipython
    :ensure t)

#+END_SRC
* Org-mode
** config
#+BEGIN_SRC emacs-lisp
    (use-package org
    :bind("C-c a". org-agenda)
    :config
    (setq org-log-done t)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (setq org-capture-templates
     '(("T" "todo with link" entry (file "~/org/agenda/todo.org")
        "* TODO %i%? \n:PROPERTIES: \n:CREATED: %U \n:END: \n %a\n")
       ("t" "todo" entry (file "~/org/agenda/todo.org")
        "* TODO %i%? \n:PROPERTIES: \n:CREATED: %U \n:END: \n")
       ("b" "stuff to buy" entry (file+headline "~/org/agenda/buy.org" "to buy")
        "* TODO buy %i%?  %^g \n:PROPERTIES: \n:CREATED: %U \n:END: \n")
       ("g" "groceries to buy" entry (file+headline "~/org/agenda/buy.org" "groceries")
        "* TODO %i%? \n:PROPERTIES: \n:CREATED: %U \n:END: \n")
       ("B" "elfeed bookmark" entry (file+headline "~/org/bookmarks.org" "elfeed")
        "* %i%? \n:PROPERTIES: \n:CREATED: %U \n:END: \n %a")
       ("s" "school" entry
        (file "~/org/agenda/school.org")
        "")
       ("w" "work" entry
        (file "~/org/agenda/work.org")
        "")
       ("h" "home" entry
        (file "~/org/agenda/home.org")
        "")
       ("l" "lab" entry
        (file "~/org/agenda/lab.org")
        "")
       ("a" "Appointment" entry (file "~/org/agenda/appointments.org")
          "* %? %^G \n  %^t")
       ("e" "todo email" entry (file+headline "~/org/agenda/todo.org" "emails")
        "* TODO %i%? \n:PROPERTIES: \n:CREATED: %U \n:END: \n %a\n")
       ))

    (setq org-capture-templates-contexts
        '(("B" ((in-mode . "elfeed-show-mode")))
          ("e" ((in-mode . "mu4e-view-mode")))))

    (setq org-agenda-files (list "~/org/agenda"))
    (setq org-archive-location "~/org/agenda/archive.org::* From %s")
    (require 'org-mu4e)
    (add-hook 'org-mode-hook (lambda () (modify-syntax-entry (string-to-char "\u25bc") "w"))) ; Down arrow for collapsed drawer.
    (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "|" "DONE" )))
    (setq org-startup-indented t)
    (setq org-hide-leading-stars t)
    (setq org-odd-level-only nil)
    (setq org-insert-heading-respect-content nil)
    (setq org-M-RET-may-split-line '((item) (default . t)))
    (setq org-special-ctrl-a/e t)
    (setq org-return-follows-link nil)
    (setq org-use-speed-commands t)
    (setq org-startup-align-all-tables nil)
    (setq org-log-into-drawer nil)
    (setq org-tags-column 1)
    (setq org-ellipsis " \u25bc" )
    (setq org-speed-commands-user nil)
    (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
    (setq org-completion-use-ido t)
    (setq org-indent-mode t)
    (setq org-startup-truncated nil)
    (setq auto-fill-mode -1)
    (setq-default fill-column 99999)
    (setq fill-column 99999)
    (setq org-image-actual-width nil)
    (setq org-confirm-babel-evaluate nil)
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
    (global-auto-revert-mode t)
    (prefer-coding-system 'utf-8)
    ;; (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
    (transient-mark-mode nil)               ;; No region when it is not highlighted
    ;; (setq cua-keep-region-after-copy t)
    (global-set-key (kbd "C-c c") 'org-capture)
    (org-babel-do-load-languages
     'org-babel-load-languages
    '((python . t)
      (ipython . t)
      ))

  )



  (defun org-override-keys ()
    (local-set-key (kbd "C-/") 'comment-or-uncomment-line-or-region)
    (local-set-key (kbd "M-h") 'org-shiftmetaleft)
    (local-set-key (kbd "M-r") 'org-shiftmetaright)
    )
    (add-hook 'org-mode-hook 'org-override-keys)

    (defun my-org-agenda-hook ()
            (local-set-key (kbd "C-t") 'org-agenda-previous-line)
            (local-set-key (kbd "C-w") 'org-agenda-next-line)
                   )
    (add-hook 'org-agenda-mode-hook 'my-org-agenda-hook)

  (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


#+END_SRC
** latex classes

* themes
#+BEGIN_SRC emacs-lisp

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'tron-legacy t)

#+END_SRC
* multiple cursors
#+BEGIN_SRC emacs-lisp

(use-package multiple-cursors
:ensure t
:config
(multiple-cursors-mode 1)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
)
#+END_SRC
* custom
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
)
#+END_SRC
* helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:config
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
(helm-mode 1)
(key-chord-define-global "r0" 'helm-find-files)
(global-set-key (kbd "C-s-=") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") 'helm-select-action)
(define-key helm-map (kbd "C-w") 'helm-next-line)
(define-key helm-map (kbd "C-t") 'helm-previous-line)
(define-key helm-find-files-map (kbd "M-M") 'helm-find-files-up-one-level)
(define-key helm-find-files-map (kbd "C-n") 'forward-char)
(define-key helm-find-files-map (kbd "M-m") 'delete-backward-char)
(define-key helm-find-files-map (kbd "M-n") 'delete-forward-char)
)
#+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
(defun helm-override-keys ()
)

(add-hook 'helm-mode-hook 'helm-override-keys)

#+END_SRC
* my local keybindings
** the override keys
#+BEGIN_SRC emacs-lisp

(defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
(define-key my-keys-minor-mode-map (kbd "C-t") 'previous-line)
(define-key my-keys-minor-mode-map (kbd "C-<m>") 'backward-char)
(define-key my-keys-minor-mode-map (kbd "C-w") 'next-line)
(define-key my-keys-minor-mode-map (kbd "C-n") 'forward-char)

(define-key my-keys-minor-mode-map (kbd "C-x C-n") 'end-of-line)
(define-key my-keys-minor-mode-map (kbd "C-x C-<m>") 'beginning-of-line)
(define-key my-keys-minor-mode-map (kbd "C-x C-w") 'end-of-buffer)
(define-key my-keys-minor-mode-map (kbd "C-x C-t") 'beginning-of-buffer)


(define-key my-keys-minor-mode-map (kbd "C-S-t") 'scroll-down)
(define-key my-keys-minor-mode-map (kbd "C-S-w") 'scroll-up)
(define-key my-keys-minor-mode-map (kbd "C-S-t") 'backward-paragraph)
(define-key my-keys-minor-mode-map (kbd "C-S-w") 'forward-paragraph)
(define-key my-keys-minor-mode-map (kbd "C-S-n") 'forward-word)
(define-key my-keys-minor-mode-map (kbd "C-S-m") 'backward-word)

(define-key my-keys-minor-mode-map (kbd "M-d") 'other-window)
(define-key my-keys-minor-mode-map (kbd "C-o") 'split-window-right)
(define-key my-keys-minor-mode-map (kbd "C-S-o") 'split-window-below)
(define-key my-keys-minor-mode-map (kbd "C-x C-o") 'delete-window)

(define-key my-keys-minor-mode-map (kbd "C-b") 'switch-to-next-buffer)
;;(define-key my-keys-minor-mode-map (kbd "C-x C-b") 'switch-to-buffer)

;;killing
(define-key my-keys-minor-mode-map (kbd "M-t") 'backward-kill-line)
(define-key my-keys-minor-mode-map (kbd "M-w") 'kill-line)
(define-key my-keys-minor-mode-map (kbd "M-n") 'delete-forward-char)
(define-key my-keys-minor-mode-map (kbd "M-m") 'delete-backward-char)
(define-key my-keys-minor-mode-map (kbd "M-S-t") 'previous-line)
(define-key my-keys-minor-mode-map (kbd "M-S-w") 'next-line)
(define-key my-keys-minor-mode-map (kbd "M-S-n") 'kill-word)
(define-key my-keys-minor-mode-map (kbd "M-S-m") 'backward-kill-word)

;; copy,cut,paste,undo
(define-key my-keys-minor-mode-map (kbd "C-s--") 'copy-region-as-kill)
(define-key my-keys-minor-mode-map (kbd "C-=") 'yank)
;;(define-key my-keys-minor-mode-map (kbd "C-s-=") 'yank-pop)
(define-key my-keys-minor-mode-map (kbd "C--") 'kill-line-or-region)
(define-key my-keys-minor-mode-map (kbd "C-z") 'undo)

;;keyboard quit
(define-key my-keys-minor-mode-map (kbd "M-q") 'keyboard-quit)

;;commenting
(define-key my-keys-minor-mode-map (kbd "C-/") 'comment-or-uncomment-line-or-region)

;;write file
(define-key my-keys-minor-mode-map (kbd "C-x C-,") 'write-file)

;;easy underscore

(defun insert-underscore ()
  (interactive)
  (insert "_"))
(global-set-key (kbd "S-SPC")    'insert-underscore) ;for easy function naming

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  t " my-keys" 'my-keys-minor-mode-map)

;;;;;;;;;on startup;;;;;;;;
(my-keys-minor-mode 1)

#+END_SRC
** where not to override
These things have to take the form:
(defun my-foo-setup-hook ()
(my-keys-minor-mode 0))
(add-hook 'foo-hook 'my-foo-setup-hook)
#+BEGIN_SRC emacs-lisp

;;;;;;;;everything else ;;;;;;;

(defun my-minibuffer-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)


(defun my-erc-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'erc-mode-hook 'my-erc-setup-hook)

(defun my-kotl-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'kotl-mode-hook 'my-kotl-setup-hook)

#+END_SRC
* tramp settings for accessing remote servers
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'tramp-default-method "ssh")
#+END_SRC
* ssh
#+BEGIN_SRC emacs-lisp
(use-package ssh
:ensure t
:config
    (add-hook 'ssh-mode-hook
              (lambda ()
                (setq ssh-directory-tracking-mode t)
                (shell-dirtrack-mode t)
                (setq dirtrackp nil))))



(require 'ssh)
#+END_SRC
* elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
  :ensure t
  :config
  (setq-default elfeed-search-filter "@3-weeks-ago +unread")
  (global-set-key (kbd "C-x w") 'elfeed)

  (defun elfeed-show-eww-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((browse-url-browser-function #'eww-browse-url))
    (elfeed-show-visit use-generic-p)))

  (defun elfeed-search-eww-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((browse-url-browser-function #'eww-browse-url))
    (elfeed-search-browse-url use-generic-p)))

  ;;lazy elfeed scroll and new page
  (defun elfeed-scroll-up-command (&optional arg)
    "Scroll up or go to next feed item in Elfeed"
    (interactive "^P")
    (let ((scroll-error-top-bottom nil))
      (condition-case-unless-debug nil
          (scroll-up-command arg)
        (error (elfeed-show-next)))))

  (defun elfeed-scroll-down-command (&optional arg)
    "Scroll up or go to next feed item in Elfeed"
    (interactive "^P")
    (let ((scroll-error-top-bottom nil))
      (condition-case-unless-debug nil
          (scroll-down-command arg)
        (error (elfeed-show-prev)))))
  :bind
      (:map elfeed-show-mode-map
           ("B" . elfeed-show-eww-open)
           ("SPC" . elfeed-scroll-up-command)
           ("S-SPC" . elfeed-scroll-down-command))
      (:map elfeed-search-mode-map
           ("B" . elfeed-search-eww-open)))

  (use-package elfeed-goodies
  :ensure t
  :config
  (elfeed-goodies/setup))

  (use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+END_SRC
* mu4e email
#+BEGIN_SRC emacs-lisp
      (require 'mu4e)

      ;; use mu4e for e-mail in emacs
      (setq mail-user-agent 'mu4e-user-agent)
  (setq
   ;;org-mu4e-link-query-in-headers-mode nil
   mue4e-headers-skip-duplicates  t
   mu4e-view-show-images t
   mu4e-view-show-addresses t
   mu4e-compose-format-flowed nil
   shr-color-visible-luminance-min 80  ;; so I can see emails that the bg is too similar to fg. default is 40
   mu4e-date-format "%y/%m/%d"
   mu4e-headers-date-format "%Y/%m/%d"
   mu4e-change-filenames-when-moving t
   mu4e-attachments-dir "~/Downloads"

   mu4e-maildir       "~/Maildir"   ;; top-level Maildir
   ;; note that these folders below must start with /
   ;; the paths are relative to maildir root
   mu4e-refile-folder "/Archive"
   mu4e-sent-folder   "/Sent"
   mu4e-drafts-folder "/Drafts"
   mu4e-trash-folder  "/Trash")
      ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
      ;; (setq mu4e-sent-messages-behavior 'delete)
      ;; setup some handy shortcuts
      ;; you can quickly switch to your Inbox -- press ``ji''
      ;; then, when you want archive some messages, move them to
      ;; the 'All Mail' folder by pressing ``ma''.

      ;;   allow  for updating mail using 'U' in the main view:
      (setq mu4e-get-mail-command "offlineimap"
          mu4e-update-interval 180)

      (add-hook 'mu4e-compose-mode-hook 'turn-off-auto-fill);; something about ourselves
      (setq
         user-mail-address "nicholaspalermo@fastmail.com"
         user-full-name  "Nicholas Palermo"
         )
      (setq mu4e-attachment-dir "~/downloads")
      ;; sending mail -- replace USERNAME with your gmail username
      ;; also, make sure the gnutls command line utils are installed
      ;; package 'gnutls-bin' in Debian/Ubuntu

      (require 'smtpmail)

      (setq
       message-send-mail-function   'smtpmail-send-it
       smtpmail-smtp-server         "smtp.fastmail.com"
       smtpmail-smtp-service 587
       smtpmail-debug-info t
       smtpmail-steam-type 'ssl)

      ;; alternatively, for emacs-24 you can use:
      ;;(setq message-send-mail-function 'smtpmail-send-it
      ;;     smtpmail-stream-type 'starttls
      ;;     smtpmail-default-smtp-server "smtp.gmail.com"
      ;;     smtpmail-smtp-server "smtp.gmail.com"
      ;;     smtpmail-smtp-service 587)

      ;; don't keep message buffers around
      (setq message-kill-buffer-on-exit t)
(add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

#+END_SRC
* org roam
#+BEGIN_SRC emacs-lisp


(fset 'insert_roam_alias
   [?\C-x ?\C-t ?\C-x ?\C-n return ?# ?+ ?r ?o ?a ?m ?_ ?a ?l ?i ?a ?s ?: ? ])


(use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "/home/nick/org/")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-show-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert)
                ("C-c n t" . insert_roam_alias)))
      :config (setq org-roam-buffer-no-delete-other-windows t))

(use-package deft
  :ensure t
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "/home/nick/org/"))

(use-package org-journal
  :ensure t
  :bind
  ("C-c n j" . org-journal-new-entry)
  :custom
  (org-journal-date-prefix "#+title: ")
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-dir "/home/nick/org")
  (org-journal-date-format "%A, %d %B %Y"))

#+END_SRC
* bibtex/org-ref
#+BEGIN_SRC emacs-lisp
    (use-package org-roam-bibtex
      :ensure t
      :after org-roam
      :hook (org-roam-mode . org-roam-bibtex-mode)
      :bind (:map org-mode-map
         (("C-c n a" . orb-note-actions))))


      (use-package helm-bibtex
             :ensure t
             :config
             (setq bibtex-completion-bibliography
             '("/home/nick/org/bibliography/MyLibrary.bib"))
             (setq bibtex-completion-pdf-field "File")
             (setq bibtex-completion-notes-path "/home/nick/org/bibliography/helm-bibtex-notes/notes.org"))


       (use-package org-ref
             :ensure t
             :config
             (setq reftex-default-bibliography '("/home/nick/org/bibliography/MyLibrary.bib")
               org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex)

           ;; see org-ref for use of these variables
           (setq org-ref-bibliography-notes "/home/nick/org/bibliography/helm-bibtex-notes/notes.org"
             org-ref-default-bibliography '("/home/nick/org/bibliography/MyLibrary.bib")
            org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b" "bibtex %b" "makeindex %b" "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b" "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b")
            org-ref-default-citation-link "citep"
                 ))

#+END_SRC
* doom modeline
#+begin_src emacs-lisp

(use-package all-the-icons
    :ensure t
)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
* yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-reload-all)
  (add-hook 'org-mode-hook #'yas-minor-mode)
  )

(use-package yasnippet-snippets
  :ensure t
    )


#+end_src
